{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "sixth-young",
   "metadata": {},
   "source": [
    "## Pivotal parameters\n",
    "\n",
    "\n",
    "\n",
    "* The type of Solitaire board: diamond or triangle.\n",
    "* The size of the board. See hex-game-boards.pdf for definitions of size for trianguler versus diamond boards.\n",
    "* The open cell (or cells) in the puzzle’s start state. NOTE: It should be possible to create an initial state with one or more holes.\n",
    "* The number of episodes that the system will run.\n",
    "* Whether the critic should use table lookup or a neural network.\n",
    "* The dimensions of the critic’s neural network: the number of layers and the number of neurons in each layer. For example, given the specifier (15, 20, 30, 5, 1) as a parameter, your code must be capable of producing a 5-layered network with 15, 20, 30, 5 and 1 node(s) in the successive layers.\n",
    "* The learning rates for the actor and critic – you may have separate values for each. When the critic uses a neural network, it is often wise to have a much lower learning rate for the critic than for the actor.\n",
    "* The eligibility decay rate for the actor and critic – you may have separate values for each. The discount factor for the actor and critic – you may have separate values for each.\n",
    "* The initial value of ε for the actor’s ε-greedy strategy. This value may change during a system run, in which case you may want to include a parameter for the ε decay rate.\n",
    "* A display variable indicating when actual games will be visualized. Normally, learning should run without visualization – since learning may involve hundreds of episodes – but then when learning finishes, the system should display at least one game, to show that the system has learned to solve the puzzle. For this final display, set ε = 0 in the actor such that the completely-greedy strategy is on display.\n",
    "* The delay between frames of the game viewer."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "framed-dietary",
   "metadata": {},
   "outputs": [],
   "source": [
    "game = Simworld.Peg_Solitaire('triangle',10,2)\n",
    "import matplotlib.pyplot as plt\n",
    "from IPython import display\n",
    "count = 0\n",
    "figures = []\n",
    "while not game.is_final_state():\n",
    "    actions = game.generate_all_childstates()\n",
    "    chosen = actions[randint(0,len(actions)-1)]\n",
    "    game.do_action(chosen)\n",
    "    figures.append(Simworld.visualize_state(game.board))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "continuing-humidity",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "for f in figures:\n",
    "    display.clear_output(wait=True)\n",
    "    display.display(f)\n",
    "    time.sleep(0.5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "descending-allocation",
   "metadata": {},
   "outputs": [],
   "source": [
    "import Modules.Simworld as Simworld\n",
    "from random import randint\n",
    "import time\n",
    "import matplotlib.pyplot as plt\n",
    "from IPython import display"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "numerous-wales",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "latter-retro",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'environment' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-2-1134f27e142b>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mSimworld\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvisualize_state\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0menvironment\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m: name 'environment' is not defined"
     ]
    }
   ],
   "source": [
    "Simworld.visualize_state(environment)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "balanced-decline",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from random import randint\n",
    "class Actor:\n",
    "    def __init__(self, environment,learning_rate):\n",
    "        self.learning_rate = learning_rate\n",
    "        self.environment = environment\n",
    "        #Initializing initial policy\n",
    "        state = environment.get_state()\n",
    "        action_space = environment.legal_actions()\n",
    "        self.policy = {}\n",
    "        for action in action_space:\n",
    "            self.policy[(state,action)] = 0\n",
    "            \n",
    "        self.eligibility = {}\n",
    "    def reset_eligibility(self):\n",
    "        for key in eligibility.keys():\n",
    "            eligibility[key] = 0\n",
    "    def get_action(self,state):\n",
    "        max_value = max(self.policy.values())\n",
    "        actions = [SAP[1] for SAP in self.policy.keys() if self.policy[SAP]==max_value and SAP[0]==state]\n",
    "        if len(actions)==1:\n",
    "            return action\n",
    "        return actions[randint(0,len(actions)-1)]\n",
    "    def add_new_SAP(self,state,action_list):\n",
    "        for action in action_list:\n",
    "            self.policy[(state,action)] = 0\n",
    "        \n",
    "\n",
    "class Critic:\n",
    "    def __init__(self):\n",
    "        #Valuefunction maps state wit\n",
    "        self.value_function = {}\n",
    "        self.eligibility = {}\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "armed-needle",
   "metadata": {},
   "outputs": [],
   "source": [
    "LEARNING_RATE_ACTOR = 0.99\n",
    "LEARNING_RATE_CRITIC = 0.99\n",
    "EPISODES = 5\n",
    "\n",
    "environment = Simworld.Peg_Solitaire('diamond',5,1)\n",
    "\n",
    "actor = Actor(environment,LEARNING_RATE_ACTOR)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "dental-raleigh",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "((2, 2), (3, 2), (4, 2))\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-20-67e7e01dc7f0>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      9\u001b[0m     \u001b[0mdisplay\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdisplay\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maction\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 11\u001b[0;31m     \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msleep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0.5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "is_final = environment.is_final_state()\n",
    "state = environment.get_state()\n",
    "while not is_final:\n",
    "    action = actor.get_action(state)\n",
    "    next_state, reward, is_final = environment.step(action)\n",
    "    actor.add_new_SAP(next_state,environment.legal_actions())\n",
    "    f = Simworld.visualize_state(environment)\n",
    "    display.clear_output(wait=True)\n",
    "    display.display(f)\n",
    "    print(action)\n",
    "    time.sleep(0.5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "generic-falls",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[((4, 2), (4, 3), (4, 4))]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "environment.legal_actions()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "corrected-netherlands",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((1, 1, 1, 1, 1),\n",
       " (0, 0, 0, 0, 0),\n",
       " (1, 0, 0, 1, 0),\n",
       " (0, 0, 0, 0, 1),\n",
       " (0, 0, 0, 0, 1))"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "state"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "historical-mumbai",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
